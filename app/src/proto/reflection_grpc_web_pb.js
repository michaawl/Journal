/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.15.8
// source: reflection.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = require('./reflection_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.ReflectionClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.ReflectionPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.GetReflectionQuestionsRequest,
 *   !proto.GetReflectionQuestionsReply>}
 */
const methodDescriptor_Reflection_GetReflectionQuestions = new grpc.web.MethodDescriptor(
  '/Reflection/GetReflectionQuestions',
  grpc.web.MethodType.UNARY,
  proto.GetReflectionQuestionsRequest,
  proto.GetReflectionQuestionsReply,
  /**
   * @param {!proto.GetReflectionQuestionsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.GetReflectionQuestionsReply.deserializeBinary
);


/**
 * @param {!proto.GetReflectionQuestionsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.GetReflectionQuestionsReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.GetReflectionQuestionsReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ReflectionClient.prototype.getReflectionQuestions =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Reflection/GetReflectionQuestions',
      request,
      metadata || {},
      methodDescriptor_Reflection_GetReflectionQuestions,
      callback);
};


/**
 * @param {!proto.GetReflectionQuestionsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.GetReflectionQuestionsReply>}
 *     Promise that resolves to the response
 */
proto.ReflectionPromiseClient.prototype.getReflectionQuestions =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Reflection/GetReflectionQuestions',
      request,
      metadata || {},
      methodDescriptor_Reflection_GetReflectionQuestions);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.GetReflectionQuestionByIdRequest,
 *   !proto.GetReflectionQuestionByIdReply>}
 */
const methodDescriptor_Reflection_GetReflectionQuestionById = new grpc.web.MethodDescriptor(
  '/Reflection/GetReflectionQuestionById',
  grpc.web.MethodType.UNARY,
  proto.GetReflectionQuestionByIdRequest,
  proto.GetReflectionQuestionByIdReply,
  /**
   * @param {!proto.GetReflectionQuestionByIdRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.GetReflectionQuestionByIdReply.deserializeBinary
);


/**
 * @param {!proto.GetReflectionQuestionByIdRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.GetReflectionQuestionByIdReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.GetReflectionQuestionByIdReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ReflectionClient.prototype.getReflectionQuestionById =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Reflection/GetReflectionQuestionById',
      request,
      metadata || {},
      methodDescriptor_Reflection_GetReflectionQuestionById,
      callback);
};


/**
 * @param {!proto.GetReflectionQuestionByIdRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.GetReflectionQuestionByIdReply>}
 *     Promise that resolves to the response
 */
proto.ReflectionPromiseClient.prototype.getReflectionQuestionById =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Reflection/GetReflectionQuestionById',
      request,
      metadata || {},
      methodDescriptor_Reflection_GetReflectionQuestionById);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.GetReflectionAnswerByQuestionIdRequest,
 *   !proto.GetReflectionAnswerByQuestionIdReply>}
 */
const methodDescriptor_Reflection_GetReflectionAnswerByQuestionId = new grpc.web.MethodDescriptor(
  '/Reflection/GetReflectionAnswerByQuestionId',
  grpc.web.MethodType.UNARY,
  proto.GetReflectionAnswerByQuestionIdRequest,
  proto.GetReflectionAnswerByQuestionIdReply,
  /**
   * @param {!proto.GetReflectionAnswerByQuestionIdRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.GetReflectionAnswerByQuestionIdReply.deserializeBinary
);


/**
 * @param {!proto.GetReflectionAnswerByQuestionIdRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.GetReflectionAnswerByQuestionIdReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.GetReflectionAnswerByQuestionIdReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ReflectionClient.prototype.getReflectionAnswerByQuestionId =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Reflection/GetReflectionAnswerByQuestionId',
      request,
      metadata || {},
      methodDescriptor_Reflection_GetReflectionAnswerByQuestionId,
      callback);
};


/**
 * @param {!proto.GetReflectionAnswerByQuestionIdRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.GetReflectionAnswerByQuestionIdReply>}
 *     Promise that resolves to the response
 */
proto.ReflectionPromiseClient.prototype.getReflectionAnswerByQuestionId =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Reflection/GetReflectionAnswerByQuestionId',
      request,
      metadata || {},
      methodDescriptor_Reflection_GetReflectionAnswerByQuestionId);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.PostReflectionQuestionRequest,
 *   !proto.PostReflectionQuestionReply>}
 */
const methodDescriptor_Reflection_PostReflectionQuestion = new grpc.web.MethodDescriptor(
  '/Reflection/PostReflectionQuestion',
  grpc.web.MethodType.UNARY,
  proto.PostReflectionQuestionRequest,
  proto.PostReflectionQuestionReply,
  /**
   * @param {!proto.PostReflectionQuestionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.PostReflectionQuestionReply.deserializeBinary
);


/**
 * @param {!proto.PostReflectionQuestionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.PostReflectionQuestionReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.PostReflectionQuestionReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ReflectionClient.prototype.postReflectionQuestion =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Reflection/PostReflectionQuestion',
      request,
      metadata || {},
      methodDescriptor_Reflection_PostReflectionQuestion,
      callback);
};


/**
 * @param {!proto.PostReflectionQuestionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.PostReflectionQuestionReply>}
 *     Promise that resolves to the response
 */
proto.ReflectionPromiseClient.prototype.postReflectionQuestion =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Reflection/PostReflectionQuestion',
      request,
      metadata || {},
      methodDescriptor_Reflection_PostReflectionQuestion);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.PostReflectionAnswerRequest,
 *   !proto.PostReflectionAnswerReply>}
 */
const methodDescriptor_Reflection_PostReflectionAnswer = new grpc.web.MethodDescriptor(
  '/Reflection/PostReflectionAnswer',
  grpc.web.MethodType.UNARY,
  proto.PostReflectionAnswerRequest,
  proto.PostReflectionAnswerReply,
  /**
   * @param {!proto.PostReflectionAnswerRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.PostReflectionAnswerReply.deserializeBinary
);


/**
 * @param {!proto.PostReflectionAnswerRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.PostReflectionAnswerReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.PostReflectionAnswerReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ReflectionClient.prototype.postReflectionAnswer =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Reflection/PostReflectionAnswer',
      request,
      metadata || {},
      methodDescriptor_Reflection_PostReflectionAnswer,
      callback);
};


/**
 * @param {!proto.PostReflectionAnswerRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.PostReflectionAnswerReply>}
 *     Promise that resolves to the response
 */
proto.ReflectionPromiseClient.prototype.postReflectionAnswer =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Reflection/PostReflectionAnswer',
      request,
      metadata || {},
      methodDescriptor_Reflection_PostReflectionAnswer);
};


module.exports = proto;

