/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.15.8
// source: journal.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = require('./journal_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.JournalClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.JournalPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.GetJournalEntriesRequest,
 *   !proto.GetJournalEntriesReply>}
 */
const methodDescriptor_Journal_GetJournalEntries = new grpc.web.MethodDescriptor(
  '/Journal/GetJournalEntries',
  grpc.web.MethodType.UNARY,
  proto.GetJournalEntriesRequest,
  proto.GetJournalEntriesReply,
  /**
   * @param {!proto.GetJournalEntriesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.GetJournalEntriesReply.deserializeBinary
);


/**
 * @param {!proto.GetJournalEntriesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.GetJournalEntriesReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.GetJournalEntriesReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.JournalClient.prototype.getJournalEntries =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Journal/GetJournalEntries',
      request,
      metadata || {},
      methodDescriptor_Journal_GetJournalEntries,
      callback);
};


/**
 * @param {!proto.GetJournalEntriesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.GetJournalEntriesReply>}
 *     Promise that resolves to the response
 */
proto.JournalPromiseClient.prototype.getJournalEntries =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Journal/GetJournalEntries',
      request,
      metadata || {},
      methodDescriptor_Journal_GetJournalEntries);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.GetJournalEntryRequest,
 *   !proto.GetJournalEntryReply>}
 */
const methodDescriptor_Journal_GetJournalEntry = new grpc.web.MethodDescriptor(
  '/Journal/GetJournalEntry',
  grpc.web.MethodType.UNARY,
  proto.GetJournalEntryRequest,
  proto.GetJournalEntryReply,
  /**
   * @param {!proto.GetJournalEntryRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.GetJournalEntryReply.deserializeBinary
);


/**
 * @param {!proto.GetJournalEntryRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.GetJournalEntryReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.GetJournalEntryReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.JournalClient.prototype.getJournalEntry =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Journal/GetJournalEntry',
      request,
      metadata || {},
      methodDescriptor_Journal_GetJournalEntry,
      callback);
};


/**
 * @param {!proto.GetJournalEntryRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.GetJournalEntryReply>}
 *     Promise that resolves to the response
 */
proto.JournalPromiseClient.prototype.getJournalEntry =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Journal/GetJournalEntry',
      request,
      metadata || {},
      methodDescriptor_Journal_GetJournalEntry);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.PostJournalEntryRequest,
 *   !proto.PostJournalEntryReply>}
 */
const methodDescriptor_Journal_PostJournalEntry = new grpc.web.MethodDescriptor(
  '/Journal/PostJournalEntry',
  grpc.web.MethodType.UNARY,
  proto.PostJournalEntryRequest,
  proto.PostJournalEntryReply,
  /**
   * @param {!proto.PostJournalEntryRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.PostJournalEntryReply.deserializeBinary
);


/**
 * @param {!proto.PostJournalEntryRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.PostJournalEntryReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.PostJournalEntryReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.JournalClient.prototype.postJournalEntry =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Journal/PostJournalEntry',
      request,
      metadata || {},
      methodDescriptor_Journal_PostJournalEntry,
      callback);
};


/**
 * @param {!proto.PostJournalEntryRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.PostJournalEntryReply>}
 *     Promise that resolves to the response
 */
proto.JournalPromiseClient.prototype.postJournalEntry =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Journal/PostJournalEntry',
      request,
      metadata || {},
      methodDescriptor_Journal_PostJournalEntry);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.GetReflectionAnswersRequest,
 *   !proto.GetReflectionAnswersReply>}
 */
const methodDescriptor_Journal_GetReflectionAnswers = new grpc.web.MethodDescriptor(
  '/Journal/GetReflectionAnswers',
  grpc.web.MethodType.UNARY,
  proto.GetReflectionAnswersRequest,
  proto.GetReflectionAnswersReply,
  /**
   * @param {!proto.GetReflectionAnswersRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.GetReflectionAnswersReply.deserializeBinary
);


/**
 * @param {!proto.GetReflectionAnswersRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.GetReflectionAnswersReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.GetReflectionAnswersReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.JournalClient.prototype.getReflectionAnswers =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Journal/GetReflectionAnswers',
      request,
      metadata || {},
      methodDescriptor_Journal_GetReflectionAnswers,
      callback);
};


/**
 * @param {!proto.GetReflectionAnswersRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.GetReflectionAnswersReply>}
 *     Promise that resolves to the response
 */
proto.JournalPromiseClient.prototype.getReflectionAnswers =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Journal/GetReflectionAnswers',
      request,
      metadata || {},
      methodDescriptor_Journal_GetReflectionAnswers);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.GetReflectionQuestionsRequest,
 *   !proto.GetReflectionQuestionsReply>}
 */
const methodDescriptor_Journal_GetReflectionQuestions = new grpc.web.MethodDescriptor(
  '/Journal/GetReflectionQuestions',
  grpc.web.MethodType.UNARY,
  proto.GetReflectionQuestionsRequest,
  proto.GetReflectionQuestionsReply,
  /**
   * @param {!proto.GetReflectionQuestionsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.GetReflectionQuestionsReply.deserializeBinary
);


/**
 * @param {!proto.GetReflectionQuestionsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.GetReflectionQuestionsReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.GetReflectionQuestionsReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.JournalClient.prototype.getReflectionQuestions =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Journal/GetReflectionQuestions',
      request,
      metadata || {},
      methodDescriptor_Journal_GetReflectionQuestions,
      callback);
};


/**
 * @param {!proto.GetReflectionQuestionsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.GetReflectionQuestionsReply>}
 *     Promise that resolves to the response
 */
proto.JournalPromiseClient.prototype.getReflectionQuestions =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Journal/GetReflectionQuestions',
      request,
      metadata || {},
      methodDescriptor_Journal_GetReflectionQuestions);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.GetUsersRequest,
 *   !proto.GetUsersReply>}
 */
const methodDescriptor_Journal_GetUsers = new grpc.web.MethodDescriptor(
  '/Journal/GetUsers',
  grpc.web.MethodType.UNARY,
  proto.GetUsersRequest,
  proto.GetUsersReply,
  /**
   * @param {!proto.GetUsersRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.GetUsersReply.deserializeBinary
);


/**
 * @param {!proto.GetUsersRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.GetUsersReply)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.GetUsersReply>|undefined}
 *     The XHR Node Readable Stream
 */
proto.JournalClient.prototype.getUsers =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Journal/GetUsers',
      request,
      metadata || {},
      methodDescriptor_Journal_GetUsers,
      callback);
};


/**
 * @param {!proto.GetUsersRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.GetUsersReply>}
 *     Promise that resolves to the response
 */
proto.JournalPromiseClient.prototype.getUsers =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Journal/GetUsers',
      request,
      metadata || {},
      methodDescriptor_Journal_GetUsers);
};


module.exports = proto;

